body {
	width: 100%;
	height: 100%;
	margin: 0;
	display: flex;
}

.wide-col {
	width: 60%;
	height: 100%;
}

.narrow-col {
	width: 40%;
	height: 100%;
}

.box {
	width: 100%;
	height: 50%;
}

.blue {background-color: #0D11A8;}
.red {background-color: #F50F0F;}
.yellow {background-color: #FAE317;}
.grey {background-color: #91908f;}


/* https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering/ */
/* If you're using 'display: flex' this class can be used to easily center horizontally! */
.center-horizontal {
	align-items: center;	
	display: flex;
}

/* If you're using 'display: flex' this class can be used to easily center vertically! */
.center-vertical {
	justify-content: center;
	display: flex;
}

/* Keep your image from overflowing it's parent DIV */
.contain-image {
	max-height: 75%;
	max-width: 75%;
}
/*The media query is going to affect four CSS classes which are the body, wide-col,narrow-col and box 
once the screen is minimized to 650px. Specifically the display of the narrow-col will be changed to flex when the screen 
is minimized because the yellow and red box will be displayed side by side. */
@media only screen and (max-width: 650px) {
 body {
	display: block;
 }
 .wide-col {
	width: 100%;
	height: 60%;
}
 .narrow-col {
	width: 100%;
	height: 40%;
	display: flex;
}
 .box{
	width: 50%;
	height: 100%;
 }

}
/*The CSS classes that are going to be affect by this media query are the narrow-col and box class. 
Specifically the display of the narrow-col will be changed to block when the screen 
is minimized because the yellow and red box will be displayed on top of one another. The height of the yellow and 
red box will be larger than 60%, so the screen will become scrollable*/
@media only screen and (max-width: 650px) {
	.narrow-col {
	width: 100%;
	height: 60%;
	display: block;
	}
	.box{
	width: 100%;
	height: 50%;
	}

}
